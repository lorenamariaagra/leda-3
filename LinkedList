public class LinkedList {

    private int head;
    private int tail;
    private int size();

    public LinkedList() {

        this.head  = null;
        this.tail = null;
        this.size = 0;
    }

    public boolean isEmpty() {
        if (this.head == null);
            return true;
    }

    public void addFirst(int valor) {

        Node newNode = new Node(valor);

        if(isEmpty()){
            this.head = newNode;
            this.tail = newNode;

        }else{
            newNode.next = this.head;
            this.head.prev = newNode;
            this.head = newNode;

        }

        this.size += 1;
    }

    public void addLast(int valor) {

        Node newNode = new Node(valor);

        if(isEmpty()){
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.prev = this.tail;
            this.tail.next = newNode;
            this.tail = newNode;
        }

        this.size += 1;
    }
    // adiciona um valor na posição passada como parâmetro
    public void add(int index, int valor) {
        if(index < 0 || index > this.size) throw new RunTimeException();

        Node newNode = new Node(valor);

        if(index == 0){
            this.addFirst(valor);

        }else if(index == size){
            this.addLast(valor);
        }else{

            Node aux = this.head;

            for(int i = 0; i < index - 1; i++)
                aux = aux.next;

            newNode.next = aux.next;
            aux.next = newNode;
            newNode.next.prev = newNode;
            newNode.prev = aux;

            size += 1;
        }
    }

    public int getFirst() {
        return this.head.v;
    }

    public int getLast() {
        return this.tail.v;
    }

    // retorna o elemento na posição  passada como parâmetro
    // deve lançar IndexOutOfBoundsException se o índice não for válido.
    public int get(int index) {
         if(index < 0 || index >= size) throw new RunTimeException();

         Node aux = this.head;

         for(int i = 0; i < index; i++)
             aux = aux.next;

         return aux;
    }
    // retorna o elemento na posição  passada como parâmetro
    // deve lançar IndexOutOfBoundsException se o índice não for válido.
    public int get(int index) {
         if(index < 0 || index >= size) throw new RunTimeException();

         Node aux = this.head;

         for(int i = 0; i < index; i++)
             aux = aux.next;

         return aux;
    }

    // deve lançar exceção caso a fila esteja vazia.
    public int removeFirst() {
        if(isEmpty) throw new RunTimeException();

        if(this.size == 1){
            Node aux = this.head;
            this.head = null;
            this.tail = null;
            this.size--;

            return aux;
        }

        Node aux = this.head;
        this.head = this.head.next
        this.head.prev = null;
        size--;
        return aux;
    }


    // deve lançar exceção caso a fila esteja vazia.
    public int removeLast() {
        if(isEmpty) throw new RunTimeException();

        if(this.size == 1){
            Node aux = this.tail;
            this.head = null;
            this.tail = null;
            this.size--;

            return aux;
        }

        Node aux = this.tail;
        this.tail = this.tail.prev;
        this.tail.next = null;
        this.size --;
        return aux;
    }

    // remove o valor no índice passado como parâmetro. retorna o valor removido.
    // lançar exceção se o índice não for válido.
    public int remove(int index) {
        if(index < 0 || index >= size) throw new RunTimeException();

        if(index == 0)
            return removeFirst;
        if(index = size)
            removeLast();

        Node aux = this.head;
        for(int i =0; i < index; i++){
            aux = aux.next;
            }
        aux.prev.next = aux.next;
        aux.next.prev = aux.prev;
        size--;
        return aux;
    }

